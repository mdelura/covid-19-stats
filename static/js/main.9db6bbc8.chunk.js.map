{"version":3,"sources":["services/DataService.ts","components/Spinner.tsx","data/Population.ts","services/ResultReader.ts","components/Charts.tsx","components/CenteredContent.tsx","components/DataSelector.tsx","components/SummaryTable.tsx","App.tsx","theme.ts","serviceWorker.ts","index.tsx"],"names":["dataUrl","getDataResults","a","Axios","get","response","statusText","parse","data","columns","Spinner","message","Box","display","flexDirection","alignItems","CircularProgress","Typography","style","marginTop","getPopulation","country","Population","getDayValues","dataResult","dayValues","population","key","hasOwnProperty","findIndex","c","value","parseInt","previousValue","length","totalCases","daily","split","month","day","year","date","Date","UTC","push","dailyIncrease","ofPopulation","values","lastDayValues","_","takeRight","averageIncrease","meanBy","dv","last","i","previousDayValue","Math","round","setDate","getDate","Charts","dataResults","showLastPeriod","getSeries","dataSelector","map","dr","name","series","concat","ResultReader","getTime","index","dailySeries","dailySeriesPer100k","dailyIncreaseSeries","dailyIncreaseSeriesSinceDayOne","slice","dailySeriesFromDayOne","seriesOfPopulation","Fragment","type","options","title","text","fontSize","fontWeight","xaxis","stroke","dashArray","s","dataLabels","enabled","yaxis","labels","formatter","v","toFixed","toPrecision","CenteredContent","children","justifyContent","css","minHeight","DataSelector","selectedResults","onChangeSelectedResults","Autocomplete","multiple","onChange","e","getOptionLabel","uniq","compact","join","renderInput","params","TextField","variant","label","placeholder","SummaryTable","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","scope","toLocaleString","defaultRegions","App","useState","isLoading","setIsLoading","setDataResults","selectedDataResults","setSelectedDataResults","savedRegions","localStorage","getItem","selectedRegions","JSON","useEffect","DataService","then","sortedResults","sortBy","filter","includes","AppBar","position","backgroundColor","paddingTop","Toolbar","Grid","container","item","xs","setItem","stringify","Container","noWrap","Link","href","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.9db6bbc8.chunk.js","sourcesContent":["import Axios from 'axios';\r\nimport parse from 'csv-parse/lib/sync';\r\nimport DataResult from '../models/DataResult';\r\n\r\nconst dataUrl =\r\n    'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv';\r\n\r\nconst getDataResults = async (): Promise<DataResult[] | undefined> => {\r\n    const response = await Axios.get(dataUrl);\r\n\r\n    if (response.statusText !== 'OK') return;\r\n\r\n    return parse(response.data, { columns: true }) as DataResult[];\r\n};\r\n\r\nexport default {\r\n    getDataResults,\r\n    dataUrl\r\n};\r\n","import * as React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Typography, Box } from '@material-ui/core';\r\n\r\nexport interface SpinnerProps {\r\n    message?: string;\r\n}\r\n\r\nconst Spinner: React.SFC<SpinnerProps> = ({ message }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                <CircularProgress />\r\n                <Typography style={{ marginTop: 5 }}>{message}</Typography>\r\n            </Box>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","interface IPopulation {\r\n    [index: string]: number;\r\n}\r\n\r\nexport const getPopulation = (country: string) => Population[country];\r\n\r\nconst Population: IPopulation = {\r\n    'China': 1439323776,\r\n    'India': 1380004385,\r\n    'US': 331002651,\r\n    'Indonesia': 273523615,\r\n    'Pakistan': 220892340,\r\n    'Brazil': 212559417,\r\n    'Nigeria': 206139589,\r\n    'Bangladesh': 164689383,\r\n    'Russia': 145934462,\r\n    'Mexico': 128932753,\r\n    'Japan': 126476461,\r\n    'Ethiopia': 114963588,\r\n    'Philippines': 109581078,\r\n    'Egypt': 102334404,\r\n    'Vietnam': 97338579,\r\n    'DR Congo': 89561403,\r\n    'Turkey': 84339067,\r\n    'Iran': 83992949,\r\n    'Germany': 83783942,\r\n    'Thailand': 69799978,\r\n    'United Kingdom': 67886011,\r\n    'France': 65273511,\r\n    'Italy': 60461826,\r\n    'Tanzania': 59734218,\r\n    'South Africa': 59308690,\r\n    'Myanmar': 54409800,\r\n    'Kenya': 53771296,\r\n    'South Korea': 51269185,\r\n    'Colombia': 50882891,\r\n    'Spain': 46754778,\r\n    'Uganda': 45741007,\r\n    'Argentina': 45195774,\r\n    'Algeria': 43851044,\r\n    'Sudan': 43849260,\r\n    'Ukraine': 43733762,\r\n    'Iraq': 40222493,\r\n    'Afghanistan': 38928346,\r\n    'Poland': 37846611,\r\n    'Canada': 37742154,\r\n    'Morocco': 36910560,\r\n    'Saudi Arabia': 34813871,\r\n    'Uzbekistan': 33469203,\r\n    'Peru': 32971854,\r\n    'Angola': 32866272,\r\n    'Malaysia': 32365999,\r\n    'Mozambique': 31255435,\r\n    'Ghana': 31072940,\r\n    'Yemen': 29825964,\r\n    'Nepal': 29136808,\r\n    'Venezuela': 28435940,\r\n    'Madagascar': 27691018,\r\n    'Cameroon': 26545863,\r\n    \"Côte d'Ivoire\": 26378274,\r\n    'North Korea': 25778816,\r\n    'Australia': 25499884,\r\n    'Niger': 24206644,\r\n    'Taiwan': 23816775,\r\n    'Sri Lanka': 21413249,\r\n    'Burkina Faso': 20903273,\r\n    'Mali': 20250833,\r\n    'Romania': 19237691,\r\n    'Malawi': 19129952,\r\n    'Chile': 19116201,\r\n    'Kazakhstan': 18776707,\r\n    'Zambia': 18383955,\r\n    'Guatemala': 17915568,\r\n    'Ecuador': 17643054,\r\n    'Syria': 17500658,\r\n    'Netherlands': 17134872,\r\n    'Senegal': 16743927,\r\n    'Cambodia': 16718965,\r\n    'Chad': 16425864,\r\n    'Somalia': 15893222,\r\n    'Zimbabwe': 14862924,\r\n    'Guinea': 13132795,\r\n    'Rwanda': 12952218,\r\n    'Benin': 12123200,\r\n    'Burundi': 11890784,\r\n    'Tunisia': 11818619,\r\n    'Bolivia': 11673021,\r\n    'Belgium': 11589623,\r\n    'Haiti': 11402528,\r\n    'Cuba': 11326616,\r\n    'South Sudan': 11193725,\r\n    'Dominican Republic': 10847910,\r\n    'Czech Republic (Czechia)': 10708981,\r\n    'Greece': 10423054,\r\n    'Jordan': 10203134,\r\n    'Portugal': 10196709,\r\n    'Azerbaijan': 10139177,\r\n    'Sweden': 10099265,\r\n    'Honduras': 9904607,\r\n    'United Arab Emirates': 9890402,\r\n    'Hungary': 9660351,\r\n    'Tajikistan': 9537645,\r\n    'Belarus': 9449323,\r\n    'Austria': 9006398,\r\n    'Papua New Guinea': 8947024,\r\n    'Serbia': 8737371,\r\n    'Israel': 8655535,\r\n    'Switzerland': 8654622,\r\n    'Togo': 8278724,\r\n    'Sierra Leone': 7976983,\r\n    'Hong Kong': 7496981,\r\n    'Laos': 7275560,\r\n    'Paraguay': 7132538,\r\n    'Bulgaria': 6948445,\r\n    'Libya': 6871292,\r\n    'Lebanon': 6825445,\r\n    'Nicaragua': 6624554,\r\n    'Kyrgyzstan': 6524195,\r\n    'El Salvador': 6486205,\r\n    'Turkmenistan': 6031200,\r\n    'Singapore': 5850342,\r\n    'Denmark': 5792202,\r\n    'Finland': 5540720,\r\n    'Congo': 5518087,\r\n    'Slovakia': 5459642,\r\n    'Norway': 5421241,\r\n    'Oman': 5106626,\r\n    'State of Palestine': 5101414,\r\n    'Costa Rica': 5094118,\r\n    'Liberia': 5057681,\r\n    'Ireland': 4937786,\r\n    'Central African Republic': 4829767,\r\n    'New Zealand': 4822233,\r\n    'Mauritania': 4649658,\r\n    'Panama': 4314767,\r\n    'Kuwait': 4270571,\r\n    'Croatia': 4105267,\r\n    'Moldova': 4033963,\r\n    'Georgia': 3989167,\r\n    'Eritrea': 3546421,\r\n    'Uruguay': 3473730,\r\n    'Bosnia and Herzegovina': 3280819,\r\n    'Mongolia': 3278290,\r\n    'Armenia': 2963243,\r\n    'Jamaica': 2961167,\r\n    'Qatar': 2881053,\r\n    'Albania': 2877797,\r\n    'Puerto Rico': 2860853,\r\n    'Lithuania': 2722289,\r\n    'Namibia': 2540905,\r\n    'Gambia': 2416668,\r\n    'Botswana': 2351627,\r\n    'Gabon': 2225734,\r\n    'Lesotho': 2142249,\r\n    'North Macedonia': 2083374,\r\n    'Slovenia': 2078938,\r\n    'Guinea-Bissau': 1968001,\r\n    'Latvia': 1886198,\r\n    'Bahrain': 1701575,\r\n    'Equatorial Guinea': 1402985,\r\n    'Trinidad and Tobago': 1399488,\r\n    'Estonia': 1326535,\r\n    'Timor-Leste': 1318445,\r\n    'Mauritius': 1271768,\r\n    'Cyprus': 1207359,\r\n    'Eswatini': 1160164,\r\n    'Djibouti': 988000,\r\n    'Fiji': 896445,\r\n    'Réunion': 895312,\r\n    'Comoros': 869601,\r\n    'Guyana': 786552,\r\n    'Bhutan': 771608,\r\n    'Solomon Islands': 686884,\r\n    'Macao': 649335,\r\n    'Montenegro': 628066,\r\n    'Luxembourg': 625978,\r\n    'Western Sahara': 597339,\r\n    'Suriname': 586632,\r\n    'Cabo Verde': 555987,\r\n    'Maldives': 540544,\r\n    'Malta': 441543,\r\n    'Brunei': 437479,\r\n    'Guadeloupe': 400124,\r\n    'Belize': 397628,\r\n    'Bahamas': 393244,\r\n    'Martinique': 375265,\r\n    'Iceland': 341243,\r\n    'Vanuatu': 307145,\r\n    'French Guiana': 298682,\r\n    'Barbados': 287375,\r\n    'New Caledonia': 285498,\r\n    'French Polynesia': 280908,\r\n    'Mayotte': 272815,\r\n    'Sao Tome & Principe': 219159,\r\n    'Samoa': 198414,\r\n    'Saint Lucia': 183627,\r\n    'Channel Islands': 173863,\r\n    'Guam': 168775,\r\n    'Curaçao': 164093,\r\n    'Kiribati': 119449,\r\n    'Micronesia': 115023,\r\n    'Grenada': 112523,\r\n    'St. Vincent & Grenadines': 110940,\r\n    'Aruba': 106766,\r\n    'Tonga': 105695,\r\n    'U.S. Virgin Islands': 104425,\r\n    'Seychelles': 98347,\r\n    'Antigua and Barbuda': 97929,\r\n    'Isle of Man': 85033,\r\n    'Andorra': 77265,\r\n    'Dominica': 71986,\r\n    'Cayman Islands': 65722,\r\n    'Bermuda': 62278,\r\n    'Marshall Islands': 59190,\r\n    'Northern Mariana Islands': 57559,\r\n    'Greenland': 56770,\r\n    'American Samoa': 55191,\r\n    'Saint Kitts & Nevis': 53199,\r\n    'Faeroe Islands': 48863,\r\n    'Sint Maarten': 42876,\r\n    'Monaco': 39242,\r\n    'Turks and Caicos': 38717,\r\n    'Saint Martin': 38666,\r\n    'Liechtenstein': 38128,\r\n    'San Marino': 33931,\r\n    'Gibraltar': 33691,\r\n    'British Virgin Islands': 30231,\r\n    'Caribbean Netherlands': 26223,\r\n    'Palau': 18094,\r\n    'Cook Islands': 17564,\r\n    'Anguilla': 15003,\r\n    'Tuvalu': 11792,\r\n    'Wallis & Futuna': 11239,\r\n    'Nauru': 10824,\r\n    'Saint Barthelemy': 9877,\r\n    'Saint Helena': 6077,\r\n    'Saint Pierre & Miquelon': 5794,\r\n    'Montserrat': 4992,\r\n    'Falkland Islands': 3480,\r\n    'Niue': 1626,\r\n    'Tokelau': 1357,\r\n    'Holy See': 801\r\n};\r\n","import DataResult from '../models/DataResult';\r\nimport DayValue from '../models/DayValue';\r\nimport _ from 'lodash';\r\nimport { getPopulation } from '../data/Population';\r\n\r\nconst columns = ['Province/State', 'Country/Region', 'Lat', 'Long'];\r\n\r\nconst getDays = (dataResult: DataResult): string[] => {\r\n    const days = [];\r\n    for (const key in dataResult) {\r\n        if (dataResult.hasOwnProperty(key) && columns.findIndex(c => c === key) < 0) {\r\n            days.push(key);\r\n        }\r\n    }\r\n\r\n    return days;\r\n};\r\n\r\nconst getDaysFromDayOne = (dataResult: DataResult): string[] => {\r\n    const days = [];\r\n    for (const key in dataResult) {\r\n        const value = parseInt(dataResult[key] as string);\r\n        if (dataResult.hasOwnProperty(key) && columns.findIndex(c => c === key) < 0 && value) {\r\n            days.push(key);\r\n        }\r\n    }\r\n\r\n    return days;\r\n};\r\n\r\nconst getValues = (dataResult: DataResult): number[] => {\r\n    const values = [];\r\n    for (const key in dataResult) {\r\n        if (dataResult.hasOwnProperty(key) && columns.findIndex(c => c === key) < 0) {\r\n            values.push(parseInt(dataResult[key] as string));\r\n        }\r\n    }\r\n\r\n    return values;\r\n};\r\n\r\nconst getValuesFromDayOne = (dataResult: DataResult): number[] => {\r\n    const values = [];\r\n    for (const key in dataResult) {\r\n        const value = parseInt(dataResult[key] as string);\r\n        if (dataResult.hasOwnProperty(key) && columns.findIndex(c => c === key) < 0 && value) {\r\n            values.push(value);\r\n        }\r\n    }\r\n\r\n    return values;\r\n};\r\n\r\nconst getDayValues = (dataResult: DataResult): DayValue[] => {\r\n    const dayValues: DayValue[] = [];\r\n    const population = getPopulation(dataResult['Country/Region']);\r\n    for (const key in dataResult) {\r\n        if (dataResult.hasOwnProperty(key) && columns.findIndex(c => c === key) < 0) {\r\n            const value = parseInt(dataResult[key] as string);\r\n            const previousValue = dayValues.length ? dayValues[dayValues.length - 1].totalCases : 0;\r\n            const daily = value - previousValue;\r\n\r\n            const [month, day, year] = key.split('/');\r\n            const date = new Date(Date.UTC(parseInt(`20${year}`), parseInt(month) - 1, parseInt(day)));\r\n            dayValues.push({\r\n                date: date,\r\n                totalCases: value,\r\n                daily,\r\n                dailyIncrease: previousValue ? daily / previousValue : 0,\r\n                ofPopulation: population ? value / population : 0\r\n            });\r\n        }\r\n    }\r\n\r\n    return dayValues;\r\n};\r\n\r\nconst getEstimation = (dataResult: DataResult): DayValue[] => {\r\n    const lastDayValues = _.takeRight(getDayValues(dataResult), 3);\r\n    const averageIncrease = _.meanBy(lastDayValues, dv => dv.dailyIncrease);\r\n    const population = getPopulation(dataResult['Country/Region']);\r\n\r\n    //TODO: use lastDayValues do kroczącej estymacji\r\n    const dayValues: DayValue[] = [_.last(lastDayValues) as DayValue];\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        const previousDayValue = dayValues[i];\r\n        const daily = Math.round(previousDayValue.totalCases * averageIncrease);\r\n        const day = new Date(previousDayValue.date);\r\n        day.setDate(day.getDate() + 1);\r\n\r\n        const value = previousDayValue.totalCases + daily;\r\n\r\n        dayValues.push({\r\n            date: day,\r\n            daily,\r\n            dailyIncrease: averageIncrease,\r\n            totalCases: value,\r\n            ofPopulation: population ? value / population : 0\r\n        });\r\n    }\r\n\r\n    return dayValues;\r\n};\r\n\r\nexport default {\r\n    getDays,\r\n    getDaysFromDayOne,\r\n    getValues,\r\n    getValuesFromDayOne,\r\n    getDayValues,\r\n    getEstimation\r\n};\r\n","import React from 'react';\r\nimport Chart from 'react-apexcharts';\r\n\r\nimport ResultReader from '../services/ResultReader';\r\nimport DataResult from '../models/DataResult';\r\nimport _ from 'lodash';\r\nimport { getPopulation } from '../data/Population';\r\n\r\nexport interface ChartsProps {\r\n    dataResults: DataResult[];\r\n    showLastPeriod: boolean;\r\n}\r\n\r\nconst Charts: React.SFC<ChartsProps> = ({ dataResults, showLastPeriod }) => {\r\n    const getSeries = (dataSelector: (dataResult: DataResult) => number[][]) =>\r\n        dataResults.map(dr => ({\r\n            name: dr['Country/Region'],\r\n            //TODO: Fix since day one\r\n            data: showLastPeriod ? _.takeRight(dataSelector(dr), 14) : dataSelector(dr)\r\n            // data: dataSelector(dr)\r\n        }));\r\n\r\n    const series = _.concat(\r\n        getSeries(dr => ResultReader.getDayValues(dr).map(dv => [dv.date.getTime(), dv.totalCases])),\r\n        getSeries(dr => ResultReader.getEstimation(dr).map(dv => [dv.date.getTime(), dv.totalCases]))\r\n    );\r\n\r\n    dataResults.map(dr => ({\r\n        name: dr['Country/Region'],\r\n        data: ResultReader.getValuesFromDayOne(dr).map((value, index) => [index + 1, value])\r\n    }));\r\n\r\n    const dailySeries = getSeries(dr => ResultReader.getDayValues(dr).map(dv => [dv.date.getTime(), dv.daily]));\r\n    const dailySeriesPer100k = getSeries(dr => ResultReader.getDayValues(dr).map(dv => [dv.date.getTime(), Math.round(dv.daily / getPopulation(dr['Country/Region']) * 100000)]));\r\n\r\n    const dailyIncreaseSeries = getSeries(dr => ResultReader.getDayValues(dr).map(dv => [dv.date.getTime(), dv.dailyIncrease]));\r\n\r\n    const dailyIncreaseSeriesSinceDayOne = getSeries(dr => {\r\n        const dayValues = ResultReader.getDayValues(dr);\r\n        return dayValues.slice(dayValues.findIndex(dv => dv.totalCases)).map((dv, index) => [index + 1, dv.dailyIncrease]);\r\n    });\r\n\r\n    const dailySeriesFromDayOne = getSeries(dr => {\r\n        const dayValues = ResultReader.getDayValues(dr);\r\n        return dayValues.slice(dayValues.findIndex(dv => dv.totalCases)).map((dv, index) => [index + 1, dv.daily]);\r\n    });\r\n\r\n    const seriesOfPopulation = getSeries(dr => ResultReader.getDayValues(dr).map(dv => [dv.date.getTime(), dv.ofPopulation]));\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Chart\r\n                series={series}\r\n                type=\"line\"\r\n                options={{\r\n                    title: {\r\n                        text: 'Total cases',\r\n                        style: { fontSize: '18px', fontWeight: 'normal' }\r\n                    },\r\n                    xaxis: { type: 'datetime' },\r\n                    stroke: {\r\n                        dashArray: series.map((s, i) => (i >= series.length / 2 ? 4 : 0))\r\n                    }\r\n                }}\r\n            />\r\n            <Chart\r\n                series={dailySeries}\r\n                type=\"line\"\r\n                options={{\r\n                    title: {\r\n                        text: 'Daily cases',\r\n                        style: { fontSize: '18px', fontWeight: 'normal' }\r\n                    },\r\n                    xaxis: { type: 'datetime' },\r\n                    dataLabels: { enabled: false }\r\n                }}\r\n            />\r\n            <Chart\r\n                series={dailySeriesPer100k}\r\n                type=\"line\"\r\n                options={{\r\n                    title: {\r\n                        text: 'Daily cases per 100k',\r\n                        style: { fontSize: '18px', fontWeight: 'normal' }\r\n                    },\r\n                    xaxis: { type: 'datetime' },\r\n                    dataLabels: { enabled: false }\r\n                }}\r\n            />\r\n            <Chart\r\n                series={dailySeriesFromDayOne}\r\n                type=\"line\"\r\n                options={{\r\n                    title: {\r\n                        text: 'Daily cases since Day One',\r\n                        style: { fontSize: '18px', fontWeight: 'normal' }\r\n                    },\r\n                    xaxis: { type: 'numeric' },\r\n                    dataLabels: { enabled: false }\r\n                }}\r\n            />\r\n            <Chart\r\n                series={dailyIncreaseSeries}\r\n                type=\"line\"\r\n                options={{\r\n                    title: {\r\n                        text: 'Daily increase',\r\n                        style: { fontSize: '18px', fontWeight: 'normal' }\r\n                    },\r\n                    xaxis: { type: 'datetime' },\r\n                    dataLabels: { enabled: false },\r\n                    yaxis: { labels: { formatter: (v: number) => (v * 100).toFixed() + ' %' } }\r\n                }}\r\n            />\r\n            <Chart\r\n                series={dailyIncreaseSeriesSinceDayOne}\r\n                type=\"line\"\r\n                options={{\r\n                    title: {\r\n                        text: 'Daily increase',\r\n                        style: { fontSize: '18px', fontWeight: 'normal' }\r\n                    },\r\n                    xaxis: { type: 'numeric' },\r\n                    dataLabels: { enabled: false },\r\n                    yaxis: { labels: { formatter: (v: number) => (v * 100).toFixed() + ' %' } }\r\n                }}\r\n            />\r\n            <Chart\r\n                series={seriesOfPopulation}\r\n                type=\"line\"\r\n                options={{\r\n                    title: {\r\n                        text: '% of population',\r\n                        style: { fontSize: '18px', fontWeight: 'normal' }\r\n                    },\r\n                    xaxis: { type: 'datetime' },\r\n                    yaxis: { labels: { formatter: (v: number) => (v * 100).toPrecision(2) + ' %' } }\r\n                    // stroke: {\r\n                    //     dashArray: series.map((s, i) => (i >= series.length / 2 ? 4 : 0))\r\n                    // }\r\n                }}\r\n            />\r\n            {/* TODO Add Stats + ests + vs population*/}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Charts;\r\n","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\n\r\nexport interface CenteredContentProps {}\r\n\r\nconst CenteredContent: React.SFC<CenteredContentProps> = ({ children }) => {\r\n    return (\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" css={{ minHeight: '100vh' }}>\r\n            {children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default CenteredContent;\r\n","import React from 'react';\r\nimport DataResult from '../models/DataResult';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport _ from 'lodash';\r\n\r\nexport interface DataSelectorProps {\r\n    dataResults: DataResult[];\r\n    selectedResults: DataResult[];\r\n    onChangeSelectedResults: (selectedResults: DataResult[]) => void;\r\n}\r\n\r\nconst DataSelector: React.SFC<DataSelectorProps> = ({ dataResults, selectedResults, onChangeSelectedResults }) => {\r\n    return (\r\n        <Autocomplete\r\n            multiple\r\n            options={dataResults}\r\n            onChange={(e, values) => onChangeSelectedResults(values)}\r\n            value={selectedResults}\r\n            getOptionLabel={dr => _.uniq(_.compact([dr['Country/Region'], dr['Province/State']])).join(', ')}\r\n            renderInput={(params: any) => (\r\n                <TextField {...params} variant=\"outlined\" label=\"Regions\" placeholder={!selectedResults ? 'Select region' : ''} />\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default DataSelector;\r\n","import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DataResult from '../models/DataResult';\r\nimport ResultReader from '../services/ResultReader';\r\n\r\nimport { getPopulation } from '../data/Population';\r\nimport _ from 'lodash';\r\n\r\nexport interface SummaryTableProps {\r\n    dataResults: DataResult[];\r\n}\r\n\r\nconst SummaryTable: React.SFC<SummaryTableProps> = ({ dataResults }) => {\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Country</TableCell>\r\n                        <TableCell align=\"right\">Population</TableCell>\r\n                        <TableCell align=\"right\">Total Cases</TableCell>\r\n                        <TableCell align=\"right\">% of Population</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {dataResults.map((dr, i) => {\r\n                        const dv = _.last(ResultReader.getDayValues(dr));\r\n                        return (\r\n                            <TableRow key={i}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {dr['Country/Region']}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{getPopulation(dr['Country/Region']).toLocaleString()}</TableCell>\r\n                                <TableCell align=\"right\">{dv?.totalCases.toLocaleString()}</TableCell>\r\n                                <TableCell align=\"right\">{((dv ? dv?.ofPopulation : 0) * 100).toFixed(3) + '%'}</TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default SummaryTable;\r\n","import React, { useState, useEffect } from 'react';\r\nimport DataService from './services/DataService';\r\nimport Spinner from './components/Spinner';\r\nimport Charts from './components/Charts';\r\nimport DataResult from './models/DataResult';\r\nimport CenteredContent from './components/CenteredContent';\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport DataSelector from './components/DataSelector';\r\nimport _ from 'lodash';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport SummaryTable from './components/SummaryTable';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nconst defaultRegions = ['Poland', 'Italy', 'Germany', 'United Kingdom', 'Spain'];\r\nconst regionsKey = 'regions';\r\n\r\nconst App: React.SFC = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [dataResults, setDataResults] = useState<DataResult[]>([]);\r\n    const [selectedDataResults, setSelectedDataResults] = useState<DataResult[]>([]);\r\n    const [showLastPeriod, setShowLastPeriod] = useState(false);\r\n\r\n    const handleChangeSelectedDataResults = (selectedDataResults: DataResult[]) => {\r\n        setSelectedDataResults(selectedDataResults);\r\n        localStorage.setItem(regionsKey, JSON.stringify(selectedDataResults.map((dr) => dr['Country/Region'])));\r\n    };\r\n\r\n    const savedRegions = localStorage.getItem(regionsKey);\r\n    const selectedRegions = savedRegions ? (JSON.parse(savedRegions) as string[]) : defaultRegions;\r\n\r\n    useEffect(() => {\r\n        DataService.getDataResults().then((dataResults) => {\r\n            if (!dataResults) return;\r\n            const sortedResults = _.sortBy(dataResults, ['Country/Region', 'Province/State']);\r\n            setDataResults(sortedResults);\r\n            setSelectedDataResults(\r\n                sortedResults.filter(\r\n                    (dr) =>\r\n                        _.includes(selectedRegions, dr['Country/Region']) &&\r\n                        (!dr['Province/State'] || _.includes(selectedRegions, dr['Province/State']))\r\n                )\r\n            );\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    if (isLoading)\r\n        return (\r\n            <CenteredContent>\r\n                <Spinner message=\"Loading data...\" />\r\n            </CenteredContent>\r\n        );\r\n\r\n    if (!dataResults.length) return <CenteredContent>Failed to load data</CenteredContent>;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <AppBar position=\"sticky\" style={{ backgroundColor: '#FFF', paddingTop: 5 }}>\r\n                <Toolbar>\r\n                    <Grid container>\r\n                        <Grid item xs={9}>\r\n                            <DataSelector\r\n                                dataResults={dataResults}\r\n                                selectedResults={selectedDataResults}\r\n                                onChangeSelectedResults={handleChangeSelectedDataResults}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            {/* <FormControlLabel\r\n                                style={{ marginLeft: 5, color: '#000' }}\r\n                                control={<Switch checked={showLastPeriod} onChange={(e, c) => setShowLastPeriod(c)} />}\r\n                                label=\"Show last 2 weeks\"\r\n                                color=\"textSecondary\"\r\n                            /> */}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Box>\r\n                    <Typography variant=\"h3\">COVID-19 - Confirmed Cases</Typography>\r\n                    <Box>\r\n                        <SummaryTable dataResults={selectedDataResults} />\r\n                    </Box>\r\n                    <Box marginTop={2}>\r\n                        <Charts dataResults={selectedDataResults} showLastPeriod={showLastPeriod} />\r\n                    </Box>\r\n                </Box>\r\n                <Typography noWrap>\r\n                    Source: <Link href={DataService.dataUrl}>{DataService.dataUrl}</Link>\r\n                </Typography>\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import red from '@material-ui/core/colors/red';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#556cd6'\r\n        },\r\n        secondary: {\r\n            main: '#19857b'\r\n        },\r\n        error: {\r\n            main: red.A400\r\n        },\r\n        background: {\r\n            default: '#fff'\r\n        }\r\n    }\r\n});\r\n\r\nexport default theme;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n    </ThemeProvider>,\n    document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}